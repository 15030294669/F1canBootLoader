<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\test1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\test1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Nov 14 11:34:45 2017
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CConsole::printf(const char*, ...) &rArr; SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*) &rArr; _PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned) &rArr; _PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[15]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[59]">CRttConsole::getFreeSize()</a> from console.o(i._ZN11CRttConsole11getFreeSizeEv) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[57]">CRttConsole::open()</a> from console.o(i._ZN11CRttConsole4openEv) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[56]">CRttConsole::write(unsigned char*, unsigned short)</a> from console.o(i._ZN11CRttConsole5writeEPht) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[5a]">CRttConsole::isIdel()</a> from console.o(i._ZN11CRttConsole6isIdelEv) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[55]">CRttConsole::~CRttConsole__deallocating()</a> from console.o(i._ZN11CRttConsoleD0Ev) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[54]">CRttConsole::~CRttConsole()</a> from console.o(i._ZN11CRttConsoleD1Ev) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[52]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[58]">CConsole::COstreamDev::runTransmitter()</a> from console.o(i._ZN8CConsole11COstreamDev14runTransmitterEv) referenced from console.o(.constdata__ZTV11CRttConsole)
 <LI><a href="#[58]">CConsole::COstreamDev::runTransmitter()</a> from console.o(i._ZN8CConsole11COstreamDev14runTransmitterEv) referenced from console.o(.constdata__ZTVN8CConsole11COstreamDevE)
 <LI><a href="#[5b]">CConsole::COstreamDev::~COstreamDev__deallocating()</a> from console.o(i._ZN8CConsole11COstreamDevD0Ev) referenced from console.o(.constdata__ZTVN8CConsole11COstreamDevE)
 <LI><a href="#[5c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from console.o(.constdata__ZTVN8CConsole11COstreamDevE)
 <LI><a href="#[51]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5d]">__sti___11_Console_cpp_83107b18</a> from console.o(.text) referenced from console.o(.init_array)
 <LI><a href="#[4f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[51]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[61]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ba]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[62]"></a>CommonConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commonconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonConfig &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SysTick_Handler &rArr; CPUTIMER0_ISR() &rArr; NormalSingleton&lang;CBaseTimer&rang;::Instance() &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUTIMER0_ISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; CConsole::printf(const char*, ...) &rArr; SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*) &rArr; _PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned) &rArr; _PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::printf(const char*, ...)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBaseTimer::CBaseTimer()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBaseTimer::initialize()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_HeartLed()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartLed_Run()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CConsole&rang;::Instance()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6f]"></a>assert_failed(unsigned char*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::printf(const char*, ...)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(int, int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::isAbsoluteTimeUp()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CConsole&rang;::Instance()
</UL>

<P><STRONG><a name="[6c]"></a>Initial_HeartLed()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, heartled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Initial_HeartLed() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>HeartLed_Run()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, heartled.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72()
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBaseTimer::CBaseTimer()
</UL>

<P><STRONG><a name="[63]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonConfig
</UL>

<P><STRONG><a name="[be]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBaseTimer::initialize()
</UL>

<P><STRONG><a name="[76]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[78]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[72]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_HeartLed()
</UL>

<P><STRONG><a name="[c1]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartLed_Run()
</UL>

<P><STRONG><a name="[74]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartLed_Run()
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonConfig
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[79]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[cf]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_HeartLed()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonConfig
</UL>

<P><STRONG><a name="[e1]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[e2]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*)</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, rtt_vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*) &rArr; _PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned) &rArr; _PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::printf(const char*, ...)
</UL>

<P><STRONG><a name="[7f]"></a>CConsole::initDev(CConsole::OstreamDevEnum)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CConsole::initDev(CConsole::OstreamDevEnum) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::setDev(unsigned char*, unsigned short)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::CConsole()
</UL>

<P><STRONG><a name="[80]"></a>CConsole::CConsole()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CConsole::CConsole() &rArr; CConsole::initDev(CConsole::OstreamDevEnum) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::initDev(CConsole::OstreamDevEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CConsole&rang;::Instance()
</UL>

<P><STRONG><a name="[e9]"></a>CConsole::CConsole__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, console.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>CConsole::runTransmitter()</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CConsole::runTransmitter()
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::elemsInQue() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::puts(const char*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::putc(char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::send_array(char*, unsigned short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed(unsigned char*, unsigned)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>CConsole::send_array(char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CConsole::send_array(char*, unsigned short) &rArr; CConsole::runTransmitter()
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::push_array(char*, unsigned short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::printf(const char*, ...)
</UL>

<P><STRONG><a name="[6b]"></a>CConsole::printf(const char*, ...)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CConsole::printf(const char*, ...) &rArr; SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*) &rArr; _PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned) &rArr; _PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::send_array(char*, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed(unsigned char*, unsigned)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>CConsole::putc(char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::emptyElemsInQue() const
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
</UL>

<P><STRONG><a name="[87]"></a>CConsole::puts(const char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::push_array(char*, unsigned short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[ea]"></a>CConsole::isIdel()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>CConsole::setDev(unsigned char*, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::initDev(CConsole::OstreamDevEnum)
</UL>

<P><STRONG><a name="[8f]"></a>SEGGER_RTT_ReadNoLock</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>

<P><STRONG><a name="[90]"></a>SEGGER_RTT_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetKey
</UL>

<P><STRONG><a name="[91]"></a>SEGGER_RTT_WriteWithOverwriteNoLock</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[92]"></a>SEGGER_RTT_WriteSkipNoLock</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[93]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[95]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRttConsole::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[96]"></a>SEGGER_RTT_WriteString</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[97]"></a>SEGGER_RTT_GetKey</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WaitKey
</UL>

<P><STRONG><a name="[98]"></a>SEGGER_RTT_WaitKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetKey
</UL>

<P><STRONG><a name="[99]"></a>SEGGER_RTT_HasKey</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[eb]"></a>SEGGER_RTT_HasData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, segger_rtt.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>SEGGER_RTT_AllocDownBuffer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[9b]"></a>SEGGER_RTT_AllocUpBuffer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[9c]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[9d]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[9e]"></a>SEGGER_RTT_SetNameUpBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[9f]"></a>SEGGER_RTT_SetNameDownBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[a0]"></a>SEGGER_RTT_SetFlagsUpBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[a1]"></a>SEGGER_RTT_SetFlagsDownBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[a2]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRttConsole::open()
</UL>

<P><STRONG><a name="[a3]"></a>SEGGER_RTT_SetTerminal</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[a4]"></a>SEGGER_RTT_TerminalOut</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostTerminalSwitch(SEGGER_RTT_BUFFER_UP*, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[68]"></a>CBaseTimer::CBaseTimer()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CBaseTimer::CBaseTimer() &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CBaseTimer&rang;::Instance()
</UL>

<P><STRONG><a name="[ec]"></a>CBaseTimer::CBaseTimer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>CBaseTimer::doUpdate()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUTIMER0_ISR()
</UL>

<P><STRONG><a name="[66]"></a>CPUTIMER0_ISR()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CPUTIMER0_ISR() &rArr; NormalSingleton&lang;CBaseTimer&rang;::Instance() &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CBaseTimer&rang;::Instance()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBaseTimer::doUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[69]"></a>CBaseTimer::initialize()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CBaseTimer::initialize()
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>CBaseTimer::delay_ms(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>Timer::Timer(int, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CBaseTimer&rang;::Instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[ee]"></a>Timer::Timer__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>Timer::isAbsoluteTimeUp()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CBaseTimer&rang;::Instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed(unsigned char*, unsigned)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::isTimeUp()
</UL>

<P><STRONG><a name="[aa]"></a>Timer::isTimeUp()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::isAbsoluteTimeUp()
</UL>

<P><STRONG><a name="[ab]"></a>Timer::reset()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CBaseTimer&rang;::Instance()
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteSkipNoLock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteWithOverwriteNoLock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::push_array(char*, unsigned short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Console_cpp_83107b18
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[88]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::puts(const char*)
</UL>

<P><STRONG><a name="[8c]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit()
</UL>

<P><STRONG><a name="[5e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[53]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[b6]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[b0]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[b7]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[ae]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[af]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[f6]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>CRttConsole::getFreeSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i._ZN11CRttConsole11getFreeSizeEv))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
</UL>
<P><STRONG><a name="[57]"></a>CRttConsole::open()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, console.o(i._ZN11CRttConsole4openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRttConsole::open() &rArr; SEGGER_RTT_Init &rArr; _DoInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
</UL>
<P><STRONG><a name="[56]"></a>CRttConsole::write(unsigned char*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, console.o(i._ZN11CRttConsole5writeEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CRttConsole::write(unsigned char*, unsigned short) &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
</UL>
<P><STRONG><a name="[5a]"></a>CRttConsole::isIdel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(i._ZN11CRttConsole6isIdelEv))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
</UL>
<P><STRONG><a name="[55]"></a>CRttConsole::~CRttConsole__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, console.o(i._ZN11CRttConsoleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRttConsole::~CRttConsole__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRttConsole::~CRttConsole()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
</UL>
<P><STRONG><a name="[54]"></a>CRttConsole::~CRttConsole()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, console.o(i._ZN11CRttConsoleD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRttConsole::~CRttConsole__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
</UL>
<P><STRONG><a name="[f8]"></a>CRttConsole::~CRttConsole__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, console.o(i._ZN11CRttConsoleD1Ev), UNUSED)

<P><STRONG><a name="[58]"></a>CConsole::COstreamDev::runTransmitter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, console.o(i._ZN8CConsole11COstreamDev14runTransmitterEv))
<BR>[Address Reference Count : 2]<UL><LI> console.o(.constdata__ZTV11CRttConsole)
<LI> console.o(.constdata__ZTVN8CConsole11COstreamDevE)
</UL>
<P><STRONG><a name="[5b]"></a>CConsole::COstreamDev::~COstreamDev__deallocating()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, console.o(i._ZN8CConsole11COstreamDevD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CConsole::COstreamDev::~COstreamDev__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTVN8CConsole11COstreamDevE)
</UL>
<P><STRONG><a name="[b4]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::COstreamDev::~COstreamDev__deallocating()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRttConsole::~CRttConsole__deallocating()
</UL>

<P><STRONG><a name="[67]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::initDev(CConsole::OstreamDevEnum)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CConsole&rang;::Instance()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalSingleton&lang;CBaseTimer&rang;::Instance()
</UL>

<P><STRONG><a name="[5c]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.constdata__ZTVN8CConsole11COstreamDevE)
</UL>
<P><STRONG><a name="[f9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[fa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[b1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[84]"></a>ringque_base&lang;char&rang;::push_array(char*, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, console.o(t._ZN12ringque_baseIcE10push_arrayEPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ringque_base&lang;char&rang;::push_array(char*, unsigned short) &rArr; ringque_base&lang;char&rang;::emptyElemsInQue() const
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::emptyElemsInQue() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::puts(const char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::send_array(char*, unsigned short)
</UL>

<P><STRONG><a name="[a7]"></a>NormalSingleton&lang;CBaseTimer&rang;::Instance()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(t._ZN15NormalSingletonI10CBaseTimerE8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NormalSingleton&lang;CBaseTimer&rang;::Instance() &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBaseTimer::CBaseTimer()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(int, int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::isAbsoluteTimeUp()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUTIMER0_ISR()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::reset()
</UL>

<P><STRONG><a name="[6a]"></a>NormalSingleton&lang;CConsole&rang;::Instance()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(t._ZN15NormalSingletonI8CConsoleE8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NormalSingleton&lang;CConsole&rang;::Instance() &rArr; CConsole::CConsole() &rArr; CConsole::initDev(CConsole::OstreamDevEnum) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::CConsole()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed(unsigned char*, unsigned)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>ringque_base&lang;char&rang;::elemsInQue() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, console.o(t._ZNK12ringque_baseIcE10elemsInQueEv))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::emptyElemsInQue() const
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::runTransmitter()
</UL>

<P><STRONG><a name="[86]"></a>ringque_base&lang;char&rang;::emptyElemsInQue() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, console.o(t._ZNK12ringque_baseIcE15emptyElemsInQueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ringque_base&lang;char&rang;::emptyElemsInQue() const
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::elemsInQue() const
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringque_base&lang;char&rang;::push_array(char*, unsigned short)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CConsole::putc(char)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>SetSysClockTo72()</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7b]"></a>_PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, rtt_vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[7c]"></a>_StoreChar(SEGGER_RTT_PRINTF_DESC*, char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtt_vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[7e]"></a>_PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, rtt_vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PrintInt(SEGGER_RTT_PRINTF_DESC*, int, unsigned, unsigned, unsigned, unsigned) &rArr; _PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; _StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar(SEGGER_RTT_PRINTF_DESC*, char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned(SEGGER_RTT_PRINTF_DESC*, unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vsnprintf(char*, unsigned, const char*, std::__va_list*)
</UL>

<P><STRONG><a name="[5d]"></a>__sti___11_Console_cpp_83107b18</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, console.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.init_array)
</UL>
<P><STRONG><a name="[8b]"></a>_DoInit()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetFlagsDownBuffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetFlagsUpBuffer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetNameDownBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetNameUpBuffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_AllocUpBuffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_AllocDownBuffer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_HasKey
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ReadNoLock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[8d]"></a>_WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostTerminalSwitch(SEGGER_RTT_BUFFER_UP*, unsigned char)
</UL>

<P><STRONG><a name="[8e]"></a>_WriteNoCheck(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _WriteNoCheck(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a5]"></a>_PostTerminalSwitch(SEGGER_RTT_BUFFER_UP*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking(SEGGER_RTT_BUFFER_UP*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
</UL>

<P><STRONG><a name="[94]"></a>_GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[52]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
